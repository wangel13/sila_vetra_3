generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                  Int     @id @default(autoincrement())
  user_id             Int
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  oauth_token_secret  String?
  oauth_token         String?
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model adjustment_scores {
  tnved String @id
  score Int
}

model countries {
  country_code String @id
  country_name String
}

model countries_friendliness {
  country_code         String   @id
  country_friendliness Boolean?
}

model dataset {
  napr       String
  period     String
  nastranapr String
  tnved      String
  edizm      String
  stoim      String
  netto      String
  kol        String
  region     String
  region_s   String

  @@id([tnved, napr, nastranapr, period, stoim])
}

model declarations {
  direction         String  @db.Char(2)
  month             Int     @db.SmallInt
  year              Int     @db.SmallInt
  country_code      String
  tnved             String
  measurement_units String
  amount_usd        Decimal @db.Decimal
  net_weight        String
  kol               String
  region            String
  region_s          String

  @@id([year, month, tnved, direction, country_code, amount_usd])
}

model final_rating {
  year              Int      @db.SmallInt
  tnved             String
  tnved_title       String
  import_amount_usd Decimal? @db.Decimal
  export_amount_usd Decimal? @db.Decimal
  score             Int

  @@id([year, tnved])
}

model import_year_to_year_declarations {
  tnved             String
  year              Int      @db.SmallInt
  amount_usd        Decimal  @db.Decimal
  before_year       Int?     @db.SmallInt
  before_amount_usd Decimal? @db.Decimal

  @@id([year, tnved])
}

model per_year_declarations {
  direction  String  @db.Char(2)
  year       Int     @db.SmallInt
  tnved      String
  amount_usd Decimal @db.Decimal

  @@id([direction, year, tnved])
}

model per_year_ratio_declarations {
  year              Int      @db.SmallInt
  tnved             String
  import_amount_usd Decimal? @db.Decimal
  export_amount_usd Decimal? @db.Decimal

  @@id([year, tnved])
}

model rating {
  tnved          String
  year           Int    @db.SmallInt
  criterion_name String
  score          Int

  @@id([tnved, year, criterion_name])
}

model sessions {
  id            Int      @id @default(autoincrement())
  session_token String   @unique
  user_id       Int
  expires       DateTime
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model tnved {
  tnved String @id
  title String
}

model tnved_vital {
  tnved String @id
}

model users {
  id             Int        @id @default(autoincrement())
  name           String?
  email          String?    @unique
  email_verified DateTime?
  image          String?
  created_at     DateTime   @default(now())
  updated_at     DateTime
  accounts       accounts[]
  sessions       sessions[]
}

model verificationtokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
